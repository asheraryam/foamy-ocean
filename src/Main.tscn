[gd_scene load_steps=14 format=2]

[ext_resource path="res://big-rock.dae" type="PackedScene" id=1]
[ext_resource path="res://medium-rock.dae" type="PackedScene" id=2]
[ext_resource path="res://small-rock.dae" type="PackedScene" id=3]
[ext_resource path="res://Ocean.gd" type="Script" id=4]
[ext_resource path="res://checkerboard.png" type="Texture" id=5]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

// direction.x, direction.y, steepness, wavelength
uniform vec4 wave_1 = vec4(1.0, 0.0, 0.5, 10.0);
uniform vec4 wave_2 = vec4(0.5, 1.0, 0.6, 11.0);
uniform vec4 wave_3 = vec4(0.8, 4.0, 0.8, 9.0);

uniform float noise_zoom = 0.5;
uniform float noise_amp = 7.0;

uniform float PI = 3.14159;

float hash(vec2 p) {
  return fract(sin(dot(p * 17.17, vec2(14.91, 67.31))) * 4791.9511);
}

float noise(vec2 x) {
  vec2 p = floor(x);
  vec2 f = fract(x);
  f = f * f * (3.0 - 2.0 * f);
  vec2 a = vec2(1.0, 0.0);
  return mix(mix(hash(p + a.yy), hash(p + a.xy), f.x),
         mix(hash(p + a.yx), hash(p + a.xx), f.x), f.y);
}

float fbm(vec2 x) {
  float height = 0.0;
  float amplitude = 0.5;
  float frequency = 3.0;
  for (int i = 0; i < 6; i++){
    height += noise(x * frequency) * amplitude;
    amplitude *= 0.5;
    frequency *= 2.0;
  }
  return height;
}

vec3 gernster_wave(vec4 params, vec2 pos, float time) {
	float steepness = params.z;
	float wavelength = params.w;
	float k = 2.0 * PI / wavelength;
	float c = sqrt(9.81 / k);
	vec2 d = normalize(params.xy);
	float f = k * (dot(d, pos.xy) - c * time);
	float a = steepness / k;
	return vec3(d.x * (a * cos(f)), a * sin(f), d.y * (a * cos(f)));
}

vec3 wave(vec2 pos, float time) {
	vec3 to_return = vec3(0.0);
	to_return += gernster_wave(wave_1, pos, time);
	to_return += gernster_wave(wave_2, pos, time);
	to_return += gernster_wave(wave_3, pos, time);
	to_return.y += fbm(pos.xy * (noise_zoom/10.0)) * noise_amp;
	return to_return;
}

void vertex() {
	vec3 wave_result = wave(VERTEX.xz, TIME);
	VERTEX.y += wave_result.y;
	VERTEX.x += wave_result.x;
	VERTEX.z += wave_result.z;
	TANGENT = normalize(vec3(0.0, wave(VERTEX.xz + vec2(0.0, 0.2), TIME).y - wave(VERTEX.xz + vec2(0.0, -0.2), TIME).y, 0.4));
	BINORMAL = normalize(vec3(0.4, wave(VERTEX.xz + vec2(0.2, 0.0), TIME).y - wave(VERTEX.xz + vec2(-0.2, 0.0), TIME ).y, 0.0));
	NORMAL = cross(TANGENT, BINORMAL);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/wave_1 = Plane( 1, 0.35, -0.13, 15.9 )
shader_param/wave_2 = Plane( 0.5, 1.18, 0.33, 30.23 )
shader_param/wave_3 = Plane( 0.8, 4, 0.37, 9 )
shader_param/noise_zoom = 0.15
shader_param/noise_amp = 13.61
shader_param/PI = 3.14159

[sub_resource type="PlaneMesh" id=3]
material = SubResource( 2 )
size = Vector2( 140, 140 )
subdivide_width = 100
subdivide_depth = 100

[sub_resource type="Shader" id=4]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform sampler2D texture_metallic : hint_white;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_white;
uniform vec4 roughness_texture_channel;
uniform sampler2D texture_normal : hint_normal;
uniform float normal_scale : hint_range(-16,16);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	NORMALMAP = texture(texture_normal,base_uv).rgb;
	NORMALMAP_DEPTH = normal_scale;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/metallic_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/roughness_texture_channel = Plane( 1, 0, 0, 0 )
shader_param/normal_scale = 4.368
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_normal = ExtResource( 4 )

[sub_resource type="CubeMesh" id=6]
material = SubResource( 5 )

[sub_resource type="SpatialMaterial" id=7]
albedo_texture = ExtResource( 5 )

[sub_resource type="PlaneMesh" id=8]
material = SubResource( 7 )
size = Vector2( 80, 80 )

[node name="Main" type="Spatial"]

[node name="Big Rock" parent="." instance=ExtResource( 1 )]
visible = false

[node name="Medium Rock" parent="." instance=ExtResource( 2 )]
visible = false

[node name="Small Rock" parent="." instance=ExtResource( 3 )]
visible = false

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.71302, 0.701144, 0, -0.701144, 0.71302, 2.07501, 48.8053, 81.5205 )
visible = false

[node name="Ocean" type="MeshInstance" parent="."]
mesh = SubResource( 3 )
material/0 = null
script = ExtResource( 4 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.455897, 0.468678, -0.756637, 0.0939905, 0.820017, 0.564569, 0.885056, -0.328502, 0.329792, 0, 17.1143, 15.1763 )
light_energy = 0.3
shadow_contact = 1.0

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -13.345, 0, 0 )
visible = false
mesh = SubResource( 6 )
material/0 = null

[node name="CheckeredFloor" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -4.21407, 0 )
visible = false
mesh = SubResource( 8 )
material/0 = null

[node name="CheckeredWall" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 0.126976, -0.991906, 0, 0.991906, 0.126976, 0, -4.21407, -10.6304 )
visible = false
mesh = SubResource( 8 )
material/0 = null

